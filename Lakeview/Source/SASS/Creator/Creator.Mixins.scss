@import "Creator.Variables.scss";

@mixin media($size, $orientation: 0, $mode: up) {
    $s: map-get($mediaSizesMap, $size);
    $o: any;
    $query: null;

    @if ($mode == up) {
        $query: "(min-width: " + $s + ")";
    }
    @else if ($mode == down) {
        $query: "(max-width: " + $s + ")";
    }
    @else if ($mode == only) {
        $query: "(min-width: " + $s + ")";

        @if ($size != xl) {
            $i: index(($mediaSizesMap), ($size $s));
            $max: null;

            @if ($size == xs) {
                $max: sm;
            }
            @else if ($size == sm) {
                $max: md;
            }
            @else if ($size == md) {
                $max: lg;
            }
            @else if ($size == lg) {
                $max: xl;
            }

            $max: map-get($mediaSizesMap, $max);

            $query: $query + " and (max-width: " + $max + ")";
        }
    }

    @if ($orientation == 0) or ($orientation == 1) or ($orientation == 2) {
        $o: map-get($mediaOrientationMap, $orientation);
    }
    @else if ($orientation == up) or ($orientation == down) or ($orientation == only) {
        $o: $orientation;
    }

    @if ($o != any) {
        $query: $query + " and (orientation: " + $o + ")";
    }

    @media #{$query} {
        @content;
    }
}

@mixin bgCover() {
    background-repeat: no-repeat;
    background-position: center center;
    background-attachment: fixed;
    background-size: cover;
}

@mixin fontOutline($size, $color: white, $outlineColor: black) {
    $s: map-get($fontOutlineSizesMap, $size);

    color: $color;
    -webkit-text-stroke-width: $s;
    -webkit-text-stroke-color: $outlineColor;
}

@mixin fadeAnimation($direction, $movement: ease-in) {
    $name: fadeIn;
    $speed: 6s;

    @if ($direction == out) {
        $name: fadeOut;
        $speed: 4s;
    }

    animation-play-state: paused;
    animation: $name $speed $movement;
    animation-play-state: running;
}

@mixin defaultHover() {
    cursor: pointer;
    opacity: 0.6;
}

@mixin defaultResponsive($max-width: 100%, $minWidth: unset) {
    width: 100%;
    height: auto;
    min-width: $minWidth;
    max-width: $max-width;
}

@mixin gridRow() {
    display: flex;
    width: 100%;
    height: auto;
}

@mixin gridColumn($nr: 0, $breakpoint: none) {
    display: block;
    padding: $defaultPadding;

    $p: 100%;

    @if ($nr != 0) {
        @if ($breakpoint != none) {
            @include media($breakpoint) {
                $p: percentage(strip-units($nr) / 12);

                flex: 1 1 $p;
            }
        }
    }
    @else {
        flex: 1 1 auto;
    }

    max-width: $p;
}

@mixin noOverflow() {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin defaultButton($colorName: primary) {
    $color: map-get($systemColorsMap, $colorName);

    display: block;
    padding-left: 14px;
    padding-right: 14px;
    padding-top: 8px;
    padding-bottom: 8px;
    border-radius: 6px;
    font-size: 1.2em;
    font-weight: normal;
    background-color: $color;
    border: 1px solid $color;

    @if ($colorName == primary or $colorName == danger or $colorName == success or $colorName == dark) {
        color: white;
    }
    @else if ($colorName == disabled) {
        color: darken($color, 18%);
    }

    &:hover {
        cursor: pointer;
        opacity: 0.8;
        border: 1px solid darken($color, 8%);
        box-shadow: 0 0 10px $color;
    }
}

@mixin defaultFormControl() {
    border: 2px solid #929292;
    height: auto;
    border-radius: 4px;
    padding: 8px;
    font-size: 1em;

    &:focus {
        box-shadow: 0 0 10px map-get($miscColorsMap, DarkShadow);
        transition-delay: .1s;
        transition-property: all;
    }
}

@function response() {
    @return defaultResponsive();
}

@function strip-units($val) {
    @return $val / ($val * 0 + 1);
}

@function first($list) {
    @return nth($list, 1);
}

@function last($list) {
    @return nth($list, length($list));
}

@function isNumeric($source) {
    $result: true;

    @each $l in $alphabetList {
        @if (str-index($source, $l)) {
            $result: false;
        }
    }

    @return $result;
}

@function childByIndex($source, $index) {
    $result: null;

    @if ($index <= length($source)) {
        $i: 1;

        @each $val in $source {
            @if ($i == $index) {
                $result: $val;
            }

            $i: $i + 1;
        }
    }

    @return result;
}