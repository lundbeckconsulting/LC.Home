@function color($profileName: Default, $color: Primary) {
  $result: null;
  $profileName: toCPName($profileName);
  $color: toCPColorName($color);

  @if (map-has-key($CPs, $profileName)) {
    $tmp: map-get($CPs, $profileName);

    @if (map-has-key($tmp, $color)) {
      $result: map-get($tmp, $color);
    } @else {
      @error "Can't find color with name \"#{$color}\"";
    }
  } @else {
    @error "Can't find Color Profile with name \"#{$name}\"";
  }

  @return $result;
}

@function mapExists($mapName, $throwError: false) {
  $result: map-has-key($mapIndex, toMapName($mapName));

  @if not($result) and ($throwError) {
    @error "Can't find map named \"#{mapName}\" in MapIndex";
  }

  @return $result;
}

@function keyExists($mapName, $key, $throwError: false) {
  $result: false;

  @if (mapExists($mapName, true)) {
    $map: get($mapName);
    $result: map-has-key($map, $key);

    @if not($result) and ($throwError) {
      @error "Key \"#{$key}\" doesn't exist in map \"#{mapName}\"";
    }
  }

  @return $result;
}

@function get($mapName: Sys, $key: null) {
  $result: null;
  $mapName: toMapName($mapName);

  @if (mapExists($mapName, true)) {
    $map: map-get(map-get($mapIndex, $mapName), Data);

    @if ($key) {
      @if not(isNumeric($key)) {
        @if (map-has-key($map, $key)) {
          $result: map-get($map, $key);
        } @else {
          @error "Can't find key \"#{$key}\" in map \"#{$mapName}\"";
        }
      } @else {
        $i: 1;

        @each $k, $v in $map {
          @if (equal($i, $key)) {
            $result: $v;
          }

          $i: $i + 1;
        }

        @if not($result) {
          @error "Can't find element with index #{$key} in map \"#{$mapName}\"";
        }
      }
    } @else {
      $result: $map;
    }
  }

  @return $result;
}

@function getByCollection($coll, $key) {
  $result: null;

  @if (isCollection($coll)) {
    @if (isNumeric(($key))) {
      @if (isList($coll)) {
        $result: nth($coll, $key);
      } @else if (isMap($coll) and (map-has-key($coll, $key))) {
        $i: 1;

        @each $nm, $vl in $coll {
          @if (equal($i, $key)) {
            $result: $vl;
          }

          $i: $i + 1;
        }
      }
    } @else {
      @if (isList($coll)) {
        $result: index($coll, $key);
      } @else if (isMap($coll) and (map-has-key($coll, $key))) {
        $result: map-get($coll, $key);
      }
    }
  } @else {
    @error "$map must be of type Map or List";
  }

  @return $result;
}

@function getByIndex($mapName, $index) {
  $result: null;
  $i: 1;
  $map: get($mapName);

  @each $key, $val in $map {
    @if (equal($index, $i)) {
      $result: $val;
    }

    $i: $i + 1;

    @if ($i > length($map)) {
      @error "No element with index #{$index} in map \"#{$mapName}\"";
      $run: false;
    }
  }

  @return $result;
}

@function upper($str) {
  @return to-upper-case(toString($str));
}

@function lower($str) {
  @return to-lower-case(toString($str));
}

@function toString($str) {
  @return inspect($str);
}

@function equal($base, $vals...) {
  $result: false;

  @each $v in $vals {
    @if (upper($base) == upper($v)) {
      $result: true;
    }
  }

  @return $result;
}

@function isNull($obj) {
  $result: true;

  @if (isCollection(($obj)) and (len($obj) > 0)) {
    $result: false;
  } @else if (isString($obj)) and (str-length($obj) > 0) {
    $result: false;
  }

  @return $result;
}

@function isMap($maps...) {
  $result: true;

  @each $mp in $maps {
    @if not(equal(type-of($mp), "Map")) {
      $result: false;
    }
  }

  @return $result;
}

@function isList($lists...) {
  $result: true;

  @each $lst in $lists {
    @if not(equal(type-of($lst), "Number")) {
      $result: false;
    }
  }

  @return $result;
}

@function isCollection($coll) {
  @return isMap($coll) or isList($coll);
}

@function isNumeric($nums...) {
  $result: true;

  @each $nm in $nums {
    @if not(equal(type-of($nm), "Number")) {
      $result: false;
    }
  }

  @return $result;
}

@function isBool($value) {
  $result: type-of($value) == "boolean";

  @if not($result) {
    @if (equalMulti($value, "true", "false")) {
      $result: true;
    }
  }

  @return $result;
}

@function isString($str) {
  @return type-of($str) == "string";
}

@function len($obj) {
  $result: -1;

  @if (isCollection($obj)) {
    $result: length($obj);
  } @else {
    $result: str-length(toString($obj));
  }

  @return $result;
}

@function toCamelCase($str) {
  $progress: $str;
  $result: null;
  $running: true;

  @while $running {
    $index: str-index($progress, " ");

    @if $index {
      $result: $result + toCapitalize(str-slice($progress, 1, $index));
      $progress: str-slice($progress, ($index + 1));
    } @else {
      $running: false;
    }
  }

  @return $result;
}

@function toCapitalize($str) {
  @return upper(str-slice($str, 1, 1)) + str-slice($str, 2);
}

@function toMapName($name) {
  $result: null;

  @each $n, $v in $mapIndex {
    @if (equal($name, $n)) {
      $result: $n;
    }
  }

  @if not($result) {
    @error "Can't find map named \"#{$name}\"";
  }

  @return $result;
}

@function toCPName($name) {
  $result: null;

  @each $n, $v in $CPs {
    @if (equal($name, $n)) {
      $result: $n;
    }
  }

  @if not($result) {
    @error "Can't find Color Profile named \"#{$name}\"";
  }

  @return $result;
}

@function toColorName($name) {
  $result: null;

  @each $val, $color in $cpDefault {
    @if (equal($name, $val)) {
      $result: $val;
    }
  }

  @if not($result) {
    @error "Can't find Color named \"#{$name}\"";
  }

  @return $result;
}

@function collectionContains($coll, $key) {
  @if not(isCollection(($coll))) {
    @error "$coll must be of type Map or List";
  }

  @return (indexOf($coll, $key));
}

@function indexOf($coll, $key) {
  $result: null;

  @if (isList($coll)) {
    $result: index($coll, $key);
  } @else if (isMap($coll)) {
    $i: 1;

    @each $k, $v in $coll {
      @if (equal($k, $key)) {
        $result: $i;
      }

      $i: $i + 1;
    }
  } @else {
    @error "$coll must be of type Map or List";
  }

  @return $result;
}

@function toCPColorName($name) {
  $result: null;

  @each $val, $color in $cpDefault {
    @if (equal($name, $val)) {
      $result: $val;
    }
  }

  @if not($result) {
    @error "Can't find Color Profile Color with name \"#{$name}\"";
  }

  @return $result;
}

@function between($min, $max, $val, $inclusive: false) {
  $result: false;

  @if (isNumeric($min, $max, $val)) {
    @if not($inclusive) {
      $result: $val > $min and $val < $max;
    } @else {
      $result: $val >= $min and $val <= $max;
    }
  } @else {
    @error "Values must be numeric";
  }

  @return $result;
}
