@import "MapsAndList.scss";

@function colorProfile($name: Default) {
    $result: null;

    @each $cpName, $map in $colorProfiles {
        @if (equal($name, $cpName)) {
            $result: $map;
        }
    }

    @return $result;
}

@function color($cpName: Default, $type: Primary) {
    $result: null;
    $map: colorProfile($cpName);

    @each $name, $val in $map {
        @if (equal($name, $type)) {
            $result: $val;
        }
    }

    @return $result;
}

@function upper($str) {
    @return to-upper-case(to-str($str));
}

@function lower($str) {
    @return to-lower-case(to-str($str));
}

@function to-str($str) {
    @return inspect($str);
}

@function equal($val, $valCompare) {
    @return upper(to-str($val)) == upper(to-str($valCompare));
}

@function getByMapItemIndex($map: $headSizes, $index: 1, $lower: true, $capitalize: false) {
    $result: null;

    @if (isMap($map)) {
        $i: 1;

        @each $m in $map {
            @if (equal($i, $index)) {
                $result: $m;
            }

            $i: $i + 1;
        }
    }

    @if (len($result) > 0) {
        @if ($lower) {
            $result: lower($result);
        }
        @else if ($capitalize) {
            $result: capitalize($result);
        }
    }

    @return $result;
}

@function isMap($m) {
    @return type-of($m) == 'map';
}

@function isEmpty($val) {
    $result: false;

    @if (isMap($val)) && (length($val) == 0) {
        $result: true;
    }
    @else if not (isMap($val)) && (length($val) == 0) {
        $result: true;
    }
    @else if ($val == "") {
        $result: true;
    }

    @return $result;
}

@function camelCase($str) {
    $progress: $str;
    $result: null;
    $running: true;

    @while $running {
        $index: str-index($progress, " ");

        @if $index {
            $result: $result + capitalize(str-slice($progress, 1, $index));
            $progress: str-slice($progress, ($index + 1));
        }
        @else {
            $running: false;
        }
    }

    @return $result;
}

@function len($str) {
    @return length($str);
}

@function getMapVal($map: $airyValues, $valName: MD) {
	@return map-get($map, $valName);
}

@function getSys($name: BorderRadius) {
    @return map-get($sysValues, $name);
}

@function getKW($name: Default, $lower: true) {
    $result: getKeyword($name);

    @if ($lower) {
        $result: lower($result);
    }

	@return $result;
}

@function getKeyword($name: Default) {
	@return map-get($keywords, $name);
}

@function getWidth($size: MD) {
    @return map-get($widthSizes, $size);
}

@function getFont($size: MD) {
    @return map-get($fontSizes, $size);
}

@function getHead($size: MD) {
    @return map-get($headSizes, $size);
}

@function getAiry($size: MD) {
    @return map-get($airyValues, $size);
}

@function getGridItem($size: MD) {
    @return map-get($gridItemSizes, $size);
}

@function getGridGap($size: MD) {
    @return map-get($gridGapSizes, $size);
}

@function getMargin($size: MD) {
    @return map-get($marginValues, $size);
}

@function getPadding($size: MD) {
    @return map-get($padValues, $size);
}

@function getDoc($size: MD) {
    @return map-get($docValues, $size);
}

@function getModal($size: MD) {
    @return map-get($modals, $size);
}

@function getCommon($size: MD) {
    @return map-get($commonSizes, $size);
}

@function getBreakpoint($size: MD) {
    @return map-get($mediaBreakpoints, $size);
}

@function getColor($cpName: Default, $tone: Primary) {
    $profile: map-get($colorProfiles, $cpName);

    @return map-get($profile, $tone);
}

@function getBreakpointWidth($sizeName) {
    @return getSize(Breakpoint, $sizeName);
}

@function getSize($type: Breakpoint, $size: MD) {
    $src: null;

    @if (equal($type, Breakpoint)) {
        $src: $mediaBreakpoints;
    }
    @else if (equal($type, Font)) {
        $src: $fontSizes;
    }
    @else if (equal($type, Header)) {
        $src: $headSizes;
    }

    @return map-get($src, $size);
}