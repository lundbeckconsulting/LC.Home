{"version":3,"names":[],"mappings":"","sources":["Creator.js"],"sourcesContent":["$(\"[class^='align-vertical-']\").parent().css(\"position\", \"relative\");\n//# sourceMappingURL=Element.Layout.Other.js.map\n\n$(\".chapter\").find(\".more.invoke\").click(function() {\n  var $chapter = $(this).closest(\".chapter\");\n\n  $(this).fadeOut(\"fast\", function() {\n    if (this.localName === \"a\") {\n      $($chapter).find(\".content.main\").fadeIn(\"slow\");\n    } else {\n      $($chapter).find(\".more.wrap\").fadeOut(\"fast\", function() {\n        $($chapter).find(\".content.main\").fadeIn(\"slow\");\n      });\n    }\n  });\n});\n\n//# sourceMappingURL=TagHelper.Chapter.js.map\n\nfunction CloseModalBackground() {\n  $(\"#modalBackground\").fadeOut(\"fast\", function() {\n    $(\"#modalBackground\").remove();\n  });\n}\n\nfunction TriggerCloseModal($modal) {\n  $($modal).trigger(\"modal:hidden\");\n}\n\nfunction DoCloseModal($modal) {\n  $($modal).removeAttr(\"open\");\n  TriggerCloseModal($modal);\n}\n\nfunction CloseModal(e, hideBG = true) {\n  var $modal = $(e.currentTarget).closest(\"[class^=\\\"modal-\\\"]\");\n  DoCloseModal($modal);\n\n  if (hideBG) {\n    CloseModalBackground();\n  }\n}\n\nfunction CloseAllModals() {\n  $(\"[class^=\\\"modal-\\\"][open=\\\"open\\\"]\").each(function() {\n    DoCloseModal(this);\n  });\n\n  CloseModalBackground();\n}\n\n$(\".show-modal[data-modal]\").click(function(e) {\n  var modalId = $(this).data(\"modal\");\n\n  $(\"#\" + modalId).trigger(\"modal:show\");\n});\n\n$(\"[class^=\\\"modal-\\\"]\").on(\"modal:show\", function(e) {\n  var $modal = this;\n  var $bg = \"<div id=\\\"modalBackground\\\"></div>\";\n\n  $(\"body\").append($bg);\n\n  $(\"#modalBackground\").fadeIn(\"slow\", function() {\n    $($modal).attr(\"open\", \"open\");\n    $($modal).trigger(\"modal:visible\");\n\n    $(\"html, body\").animate({\n      scrollTop: 0\n    }, 600);\n  });\n});\n\n$(\".hide-modal\").click(function(e) {\n  CloseModal(e);\n});\n\n$(\"[class^=\\\"modal-\\\"]\").on(\"modal:hide\", function(e) {\n  CloseModal(e);\n});\n\n$(document).on(\"click\", \"#modalBackground\", function() {\n  CloseAllModals();\n});\n\n$(document).on(\"keydown\", function(e) {\n  if (e.keyCode === 27) {\n    CloseAllModals();\n  }\n});\n\n//# sourceMappingURL=TagHelper.Modal.js.map\n\nconst doLOG = entry => console.log(entry);\r\nconst doINFO = entry => console.info(entry);\r\nconst doWARN = entry => console.warning(entry);\r\nconst doERROR = entry => console.error(entry);\r\nconst doTABLE = entry => console.table(entry);\r\n\r\nconst Trim = str => str.trimStart().trimEnd();\r\n\r\nconst IsNull = obj => obj === undefined || obj === null;\r\n\r\nconst IsJSON = str => {\r\n  var result = true;\r\n\r\n  try {\r\n    JSON.parse(str);\r\n  } catch (e) {\r\n    result = false;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nconst equal = (val, compare) => val.toUpperCase() === compare.toUpperCase();\r\n\r\nconst equalList = (val, ...compares) => {\r\n  var result = false;\r\n\r\n  compares.map((compare) => {\r\n    if (equal(val, compare)) {\r\n      result = true;\r\n    }\r\n  });\r\n\r\n  return result;\r\n};\r\n\r\nconst Capitalize = str => str.charAt(0).toUpperCase() + string.slice(1);\r\n\r\n//# sourceMappingURL=Utility.js.map\r\n\nconst RequestModes = {\r\n  SameOrigin: \"same-origin\",\r\n  NoCors: \"no-cors\",\r\n  Cors: \"cors\"\r\n};\r\n\r\nconst RequestMethods = {\r\n  GET: \"GET\",\r\n  POST: \"POST\",\r\n  PUT: \"PUT\",\r\n  DELETE: \"DELETE\"\r\n};\r\n\r\nconst RequestCredentials = {\r\n  Include: \"include\",\r\n  Omit: \"omit\",\r\n  SameOrigin: \"same-origin\"\r\n};\r\n\r\nexport const Enums = () => {\r\n  get: () => RequestMethods;\r\n  get: () => RequestModes;\r\n  get: () => RequestCredentials;\r\n}\r\n\r\nexport const RequestResult = rsp => {\r\n  var response = null;\r\n\r\n  get: Response = () => response;\r\n  get: Success = () => this.Response.ok;\r\n  get: Status = () => this.Response.status;\r\n  get: StatusText = () => this.Response.statusText;\r\n\r\n  set: Response = rsp => response = rsp;\r\n};\r\n\r\nexport const WebRequest = async (controller = \"API\", action, query = {}, data = {}, method = RequestMethods.POST, mode = RequestModes.SameOrigin, creds = RequestCredentials.SameOrigin, headers = {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n  }) => {\r\n  await fetch(GetUrl(), {\r\n    method: method,\r\n    headers: headers,\r\n    credentials: creds,\r\n    body: data,\r\n    mode: mode\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return RequestResult(response);\r\n      } else {\n        throw new Error(\"Request failed: \" + response.status + \"; \" + response.statusText);\n      }\r\n    })\r\n    .catch(error => {\n      throw new Error(\"Error: \" + error.statusText, error)\n    });\r\n\r\n  function GetUrl() {\r\n    var result = \"/\" + controller + \"/\" + action;\r\n\r\n    var i = 0;\r\n    for (var q in query) {\r\n      if (i === 0) {\r\n        result += \"?\";\r\n      } else {\r\n        result += \"&\";\r\n      }\r\n\r\n      result += q[0] + \"=\" + q[1];\r\n\r\n      i++;\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\n//# sourceMappingURL=WebRequest.js.map\r\n\r\n//# sourceMappingURL=Creator.js.map\r\n"],"file":"Creator.js"}