<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CVFilename" xml:space="preserve">
    <value>SteinLundbeck-CV-english.pdf</value>
  </data>
  <data name="NewSiteContent" xml:space="preserve">
    <value>&lt;div class="row"&gt;
	&lt;div class="col-md-8"&gt;
		&lt;P&gt;
	Whether you need to present yourself online or change an existing venture, the process is painless and quick.
&lt;/p&gt;
&lt;P&gt;
	Everyone has different needs. You may need a lot of logic and functions. Maybe you just need a simple page to tell the world about your business.
&lt;/p&gt;
&lt;p&gt;
	Either way, you get online quickly without having to deal with technical details or recommended standards.
&lt;/p&gt;
	&lt;/div&gt;
	&lt;div class="col-md-4"&gt;
		&lt;img src="/IMAGE/ILLUSTRATION/ideas-to-site.png" class="r content-illu" alt="Site" /&gt;
	&lt;/div&gt;
&lt;/div&gt;</value>
  </data>
  <data name="NewSiteIntro" xml:space="preserve">
    <value>New Web Site</value>
  </data>
  <data name="NewSiteSub" xml:space="preserve">
    <value>or change an existing</value>
  </data>
  <data name="OneManBandContent" xml:space="preserve">
    <value>&lt;div class="row"&gt;
    &lt;div class="col-md-3"&gt;
        &lt;img src="/IMAGE/ILLUSTRATION/one-man-band.png" class="illu one-man-band r" title="The one man band" /&gt;
    &lt;/div&gt;
    &lt;div class="col-md-9"&gt;
&lt;p&gt;
	As a Senior System Developer with over 20 years in the industry, I have extensive experience with the entire process from product analysis, design to development and hosting.
&lt;/p&gt;
&lt;P&gt;
	I develop solutions around &lt;i&gt;Core functionality&lt;/i&gt;. Through product analysis and good collaboration, it is made visible what the solution actually offers of functionality and how the site should be structured.
&lt;/p&gt;
&lt;p&gt;
	The advantage of one man behind the wheel is that I have full insight into your solution and can make changes or add functionality without the risk of breaking the code. It results in a quick and easy process.
&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;</value>
  </data>
  <data name="OneManBandIntro" xml:space="preserve">
    <value>One Man Band</value>
  </data>
  <data name="OneManBandSub" xml:space="preserve">
    <value>one man does it all</value>
  </data>
  <data name="PhraseDownloadCV" xml:space="preserve">
    <value>Download CV</value>
  </data>
  <data name="PhraseReadCV" xml:space="preserve">
    <value>Read CV</value>
  </data>
  <data name="StartupContent" xml:space="preserve">
    <value>&lt;div class="row"&gt;
	&lt;div class="col-md-10"&gt;
&lt;p&gt;
	As one with ever-new ideas and projects, I know how difficult it can be to get realized solutions with conditions meant for well-established companies.
&lt;/p&gt;
&lt;p&gt;
	I offer favorable deals to startup's and entrepreneurs to get involved in exciting projects, follow closely the developments in different industries and collaborate with brilliant people.
&lt;/p&gt;
&lt;p&gt;
	In some cases, I can contribute views on the design and user flow of services, which can often help to eliminate potential problems later in development.
&lt;/p&gt;
	&lt;/div&gt;
	&lt;div class="col-md-2 align-center"&gt;
		&lt;img src="/IMAGE/ILLUSTRATION/idea-bulb.png" class="r content-illu idea-bulb" alt="Site" /&gt;
	&lt;/div&gt;
&lt;/div&gt;</value>
  </data>
  <data name="StartupIntro" xml:space="preserve">
    <value>Startup's &amp; Entrepreneurs</value>
  </data>
  <data name="StartupSub" xml:space="preserve">
    <value>Develop your idea</value>
  </data>
  <data name="WordDownload" xml:space="preserve">
    <value>Download</value>
  </data>
  <data name="WordRead" xml:space="preserve">
    <value>Read</value>
  </data>
</root>