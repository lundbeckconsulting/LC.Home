<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Body" xml:space="preserve">
    <value>&lt;p&gt;
Synliggjøring på nett starter med å skape et merke som kunden kjenner igjen og en nettside til å være deres ansikt utad. Et enkelt Googlesøk kan bestemme om akkurat deres side kommer på topp - her kommer SEO inn i bildet. Kunden tas med videre på en kortvarig reise: Oppmerksomheten og informasjonen om hva bedriften gjør skal komme frem i løpet av noen sekunder – ellers kan kunden snu i «døren» og gå inn på en annen nettside.
&lt;/p&gt;
&lt;p&gt;
&lt;h3&gt;Dette gjør Lundbeck Consulting for din bedrift:&lt;/h3&gt;
&lt;p&gt;
Lundbeck Consulting skreddersyr en totalløsning for deres nettside: Vi tar hele prosessen fra A til Å. Vi bygger hele nettsiden med SEO, eget domenenavn, firma e-post m.m. Hele produktet er leveringsklart for dere innen avtalt tid. Fokuset vårt er å skape en trygg prosess for kunden med god kommunikasjon før, underveis og etter prosjektet. På denne måten får bedriften deres maksimalt utnytte av vår kompetanse og dere får et produkt som kan representere bedriften deres i flere år fremover.
&lt;/p&gt;
&lt;p&gt;
	&lt;ul&gt;
		&lt;li&gt;Nettside (design og programmering)&lt;/li&gt;
		&lt;li&gt;Prototyping&lt;/li&gt;
		&lt;li&gt;SEO&lt;/li&gt;
		&lt;li&gt;Domene/Host&lt;/li&gt;
		&lt;li&gt;E-post&lt;/li&gt;
	&lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;
Med over 18 års erfaring i bransjen er vi eksperter i å kartlegge behov og tilpasse produktet: En nettside er en personlig løsning som skal fange kunden sin oppmerksomhet på en god måte og samtidig reflektere bedriften på en presentabel måte. Nettsiden må ha god innebygget SEO slik at deres kunder kan finne dere på søkemotorer også.
&lt;/p&gt;</value>
  </data>
  <data name="Header" xml:space="preserve">
    <value>Om Meg</value>
  </data>
  <data name="PhraseDownloadCV" xml:space="preserve">
    <value>Last ned CV</value>
  </data>
  <data name="PhraseDownloadRecommendation" xml:space="preserve">
    <value>Last ned attester</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Om Lundbeck Consulting</value>
  </data>
  <data name="WordContact" xml:space="preserve">
    <value>Kontakt</value>
  </data>
</root>